#include <stdio.h>
#include <stdlib.h>

typedef struct Tnode {
    char lb;
    struct Tnode * leftmostchild;
    struct Tnode * rightsibling;
} treeNode;

void PreOrder(treeNode *node)
{
	if(node!=NULL)
	{
      printf("%c ",node->lb);
      treeNode *child = node->leftmostchild;
      PreOrder(child);
      if(child != NULL)
      {
        treeNode *temp = child->rightsibling;
        while(temp != NULL)
        {
          PreOrder(temp);
          temp = temp->rightsibling;	
        }
    }
	}
}

void InOrder(treeNode *node)
{
	if(node!=NULL)
	{
      treeNode *child = node->leftmostchild;
      InOrder(child); 
      printf("%c ",node->lb); 
      if(child!=NULL)
      {
        treeNode *temp = child->rightsibling;
        while(temp != NULL)
        {
          InOrder(temp);
          temp = temp->rightsibling;	
        }
      }
	}
}

void postOrder(treeNode *node)
{
	if(node!=NULL)
	{
      treeNode *child = node->leftmostchild;
      postOrder(child); 
      if(child!=NULL)
      {
        treeNode *temp = child->rightsibling;
        while(temp != NULL)
        {
          postOrder(temp);
          temp = temp->rightsibling;	
        }
      }
      printf("%c ",node->lb); 
	}
}

int main()
{
    treeNode *root = (treeNode *)malloc(sizeof(treeNode));
    treeNode *b = (treeNode *)malloc(sizeof(treeNode));
    treeNode *c = (treeNode *)malloc(sizeof(treeNode));
    treeNode *d = (treeNode *)malloc(sizeof(treeNode));
    treeNode *e = (treeNode *)malloc(sizeof(treeNode));
    treeNode *f = (treeNode *)malloc(sizeof(treeNode));
		treeNode *g = (treeNode *)malloc(sizeof(treeNode));
    treeNode *h = (treeNode *)malloc(sizeof(treeNode));
    treeNode *i = (treeNode *)malloc(sizeof(treeNode));
    treeNode *j = (treeNode *)malloc(sizeof(treeNode));
	
		root->lb = 'a'; root->leftmostchild = b; root->rightsibling = NULL;
    b->lb = 'b'; b->leftmostchild = d; b->rightsibling = c;
    c->lb = 'c'; c->leftmostchild = f; c->rightsibling = NULL;
    d->lb = 'd'; d->leftmostchild = NULL; d->rightsibling = e;
    e->lb = 'e'; e->leftmostchild = NULL; e->rightsibling = NULL;
    f->lb = 'f'; f->leftmostchild = g; f->rightsibling = j;
    j->lb = 'j'; j->leftmostchild = NULL; j->rightsibling = NULL;
    g->lb = 'g'; g->leftmostchild = NULL; g->rightsibling = h;
    h->lb = 'h'; h->leftmostchild = NULL; h->rightsibling = i;
    i->lb = 'i'; i->leftmostchild = NULL; i->rightsibling = NULL;
    postOrder(root);
}
